{"version":3,"sources":["components/SolCards/index.js","components/Scoreboard/index.js","components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["SolCards","props","react_default","a","createElement","className","onClick","clickedPicture","id","alt","name","src","photo","Scoreboard","score","topScore","Header","shuffle","array","i","length","j","Math","floor","random","_ref","App","state","celestialBodies","showAlert","showSuccess","_this","setState","indexOf","push","handleIncrement","makeShuffle","_this2","this","components_header","style","opacity","components_Scoreboard","title","map","components_SolCards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.409dc23d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./sol.css\";\n\nconst SolCards = props => (\n  <div className=\"body-card\" onClick={() => props.clickedPicture(props.id)}>\n      <img className=\"planet-pics\" alt={props.name} src={props.photo} />\n      <p className=\"planet-text\">\n          {props.name}\n      </p>\n  </div>\n);\n\nexport default SolCards;","import React from \"react\";\nimport \"./scoreboard.css\";\n\nconst Scoreboard = props => (\n    <div className=\"score-container\">\n      <div className=\"row justify-content-center\">\n        <h2>Score: {props.score}</h2>\n        <h2>High Score: {props.topScore}</h2>\n      </div>\n      <div className=\"row justify-content-center\">\n      <h5 className=\"description\">Click on a planet or moon, but try not to click the same one twice!</h5>\n      </div>\n    </div>\n  );\n\nexport default Scoreboard;","import React from 'react';\nimport \"./header.css\";\n\nconst Header = () => {\n    \n\treturn (\n\t\t<header>\n            <div className=\"header-container\">\n                <img src=\"./assets/nebula.png\"  alt=\"nebula\"/>\n                <h1 className=\"row justify-content-center\">Remember that World</h1>\n            </div>\n\t\t</header >\n\t);\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport celestialBodies from \"./components/solarSystem.json\"\nimport SolCards from \"./components/SolCards\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Header from './components/header';\n\nconst shuffle = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n    state = {\n      celestialBodies,\n      score: 0,\n      topScore: 0,\n      showAlert: 0,\n      showSuccess: 0,\n      clickedPicture: []\n    };\n  \n    clickedPicture = id => {\n      let clickedPicture = this.state.clickedPicture;\n      let score = this.state.score;\n      let topScore = this.state.topScore;\n      this.setState({\n        showAlert: 0\n      });\n  \n      if (clickedPicture.indexOf(id) === -1) {\n        clickedPicture.push(id);\n        this.handleIncrement();\n        this.makeShuffle();\n      } else if (this.state.score === 12) {\n        this.setState({\n          showSuccess: 1,\n          score: 0,\n          clickedPicture: []\n        });\n      } else {\n        this.setState({\n          score: 0,\n          clickedPicture: []\n        });\n        this.setState({\n          showAlert: 1\n        });\n      }\n  \n      if (score > topScore) {\n        this.setState({\n          topScore: score\n        });\n      }\n    };\n  \n    handleIncrement = () => {\n      this.setState({ score: this.state.score + 1 });\n    };\n  \n    makeShuffle = () => {\n      this.setState({ celestialBodies: shuffle(celestialBodies) });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"alert alert-danger\" style={{ opacity: this.state.showAlert }}>\n                 That world has already been selected. Click another to start again.\n            </div>\n        <div className=\"alert alert-success\" style={{ opacity: this.state.showSuccess }}>\n                Your memory is pristine. \n        </div>\n        <Scoreboard\n          title=\"Planetary Clicky Game\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"planet-container\">\n          {this.state.celestialBodies.map(celestialBodies => (\n            <SolCards\n              key={celestialBodies.id}\n              id={celestialBodies.id}\n              name={celestialBodies.name}\n              photo={celestialBodies.photo}\n              clickedPicture={this.clickedPicture}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}